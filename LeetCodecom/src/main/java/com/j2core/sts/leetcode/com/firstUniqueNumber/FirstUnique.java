package com.j2core.sts.leetcode.com.firstUniqueNumber;

import org.testng.annotations.Test;

import java.util.HashSet;
import java.util.LinkedList;

public class FirstUnique {

    LinkedList<Integer> uniqNumList = new LinkedList<>();
    HashSet<Integer> uniqNumSet = new HashSet<>();
    HashSet<Integer> repeatedNumSet = new HashSet<>();

    public FirstUnique(int[] nums) {

        for (int i = 0; i < nums.length; i++){
            if (uniqNumSet.contains(nums[i])){
                uniqNumSet.remove(nums[i]);
                repeatedNumSet.add(nums[i]);
            }else {
                if (!repeatedNumSet.contains(nums[i])) {
                    uniqNumList.add(nums[i]);
                    uniqNumSet.add(nums[i]);
                }
            }
        }
    }

    public int showFirstUnique() {

        if (uniqNumList.isEmpty()){
            return -1;
        }


        while (!uniqNumList.isEmpty() && !uniqNumSet.contains(uniqNumList.getFirst())){
            uniqNumList.removeFirst();
        }
        return uniqNumList.isEmpty() ? -1 : uniqNumList.getFirst();
    }

    public void add(int value) {

        if (uniqNumSet.contains(value)){
            uniqNumSet.remove(value);
            repeatedNumSet.add(value);
        }else {
            if (!repeatedNumSet.contains(value)) {
                uniqNumList.add(value);
                uniqNumSet.add(value);
            }
        }

    }

    @Test
    public static void test(){

        FirstUnique firstUnique = new FirstUnique(new int[]{289,91,437,815,726,586,883,545,823,498,595,306,650,148,143,748,37,238,35,180,729,230,692,582,313,787,982,37,668,211,824,722,108,761,305,137,942,750,367,122,843,961,374,58,436,278,531,732,695,664,846,653,944,765,156,837,18,378,140,46,273,525,814,424,678,139,807,810,62,107,673,650,168,642,247,876,150,338,345,894,526,508,353,689,822,214,330,787,608,156,935,807,958,526,396,106,270,690,863,202,349,11,545,937,36,532,585,361,189,404,893,753,13,307,976,485,500,678,819,261,149,187,261,461,125,214,320,266,145,324,480,767,859,181,216,243,498,200,470,463,705,291,648,607,968,308,595,262,839,606,524,525,342,10,78,31,911,907,734,33,783,176,125,50,748,112,289,43,412,908,55,410,344,997,27,41,210,966,85,659,879,911,538,128,162,221,489,652,212,28,781,313,375,249,480,820,982,469,40,733,83,363,189,254,426,759,544,685,591,609,316,80,166,190,441,940,676,136,927,809,2,926,178,255,749,882,626,20,798,102,669,427,708,200,651,699,219,626,624,199,92,79,121,848,857,626,505,235,350,723,616,140,623,149,45,401,939,10,366,367,569,65,379,218,124,746,72,36,869,455,196,537,562,383,109,680,161,871,93,239,212,518,29,368,518,905,790,172,867,719,956,40,350,92,613,407,717,993,401,373,561,629,121,381,143,49,235,283,26,774,917,947,397,280,328,457,751,117,109,51,56,565,379,388,792,646,396,777,113,434,742,158,798,828,679,730,879,117,885,667,814,418,392,55,301,380,882,628,886,672,44,999,716,325,279,831,446,398,537,604,415,135,23,879,61,589,316,415,453,754,456,898,805,289,171,835,476,699,880,150,492,57,327,948,622,225,742,656,799,287,663,587,486,416,926,983,353,420,351,847,151,841,943,422,969,1,135,463,490,358,581,395,591,446,582,623,842,590,920,619,734,527,377,723,260,658,541,645,448,310,418,744,646,645,557,137,258,599,884,928,667,881,477,808,338,654,969,268,705,528,684,622,348,973,833,881,259,308,902,797,888,964,641,494,243,107,395,485,748,451,38,459,535,427,872,523,610,883,444,17,139,216,607,882,294,872,843,512,178,985,357,857,520,134,219,727,914,346,360,142,780,254,511,692,421,18,425,27,726,447,947,561,949,618,129,971,459,899,801,539,396,422,208,652,11,790,871,167,926,912,734,717,573,742,767,787,879,363,926,211,630,908,480,449,127,224,875,556,761,103,236,497,316,340,10,830,854,939,351,987,15,793,603,983,618,557,867,342,723,117,367,810,760,508,435,499,475,8,130,881,474,740,901,16,354,467,146,467,738,648,529,77,874,928,267,75,60,326,72,187,417,467,772,389,457,625,665,596,147,808,591,93,882,298,516,328,909,461,757,554,3,427,153,311,781,612,230,553,961,956,171,469,94,700,942,807,450,502,380,428,25,826,777,150,363,117,408,948,773,389,115,173,880,427,982,229,62,268,830,584,187,996,180,296,971,479,184,764,570,364,981,975,542,794,232,365,304,481,865,643,257,176,942,39,269,846,595,829,629,428,611,410,506,648,546,650,890,895,359,641,362,314,116,846,274,189,259,774,24,703,922,832,456,802,578,244,266,73,888,539,463,760,884,720,57,933,257,518,872,90,751,352,68,341,480,104,242,508,574,462,473,123,68,133,69,774,689,76,692,776,88,965,33,108,92,70,789,98,191,787,884,849,829,960,814,656,870,995,450,561,169,652,465,39,171});
        System.out.println(firstUnique.showFirstUnique());
        firstUnique.add(5);
        System.out.println(firstUnique.showFirstUnique());
        firstUnique.add(2);
        System.out.println(firstUnique.showFirstUnique());
        firstUnique.add(3);
        System.out.println(firstUnique.showFirstUnique());

    }
}

/**
 * Your FirstUnique object will be instantiated and called as such:
 * FirstUnique obj = new FirstUnique(nums);
 * int param_1 = obj.showFirstUnique();
 * obj.add(value);
 */
