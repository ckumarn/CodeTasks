package com.j2core.sts.leetcode.com.longestWellPerformingInterval;

import org.testng.Assert;
import org.testng.annotations.Test;

public class Solution {

    public int longestWPI(int[] hours) {

        int result = 0;
        int length = hours.length;

        for (int i = 0; i < length; i++){

            int subArray = length-i;

            while (subArray > result){

                int sum = 0;
                for(int j = i; j < subArray+i; j++){
                    sum += hours[j] > 8 ? 1 : -1;
                }

                if (sum > 0){
                    result = subArray;
                }
                subArray--;
            }

            if (length-i <= result){
                break;
            }
        }

        return result;
    }


    @Test
    public void test(){

        int result = longestWPI(new int[]{9,9,6,0,6,6,9});
        int result1 = longestWPI(new int[]{6, 9, 9});
        int result2 = longestWPI(new int[]{8,10,6,16,5});
        int result3 = longestWPI(new int[]{11,14,11,16,11,16,0,7,7,10,16,9,4,3,3,4,7,16,8,10,13,1,9,3,11,0,16,7,3,3,8,6,7
                ,11,13,4,0,9,0,13,8,15,16,6,5,9,13,7,2,4,13,2,5,3,4,15,14,15,1,9,13,13,7,8,15,5,16,5,13,0,5,3,4,16,12,2,6,
                16,0,8,13,8,4,11,5,8,16,1,10,0,9,12,3,0,14,12,11,8,15,8,16,4,16,7,5,4,3,9,2,4,14,6,13,5,14,6,9,9,7,3,4,13,
                10,16,5,2,0,9,16,10,14,7,13,14,9,0,9,10,13,2,7,2,16,11,12,10,15,1,1,3,12,7,8,12,10,11,7,14,1,6,16,9,6,12,10,
                0,14,4,13,14,11,13,7,16,2,14,0,12,13,14,12,14,14,4,0,7,3,5,1,0,14,13,0,12,7,16,1,14,5,11,4,7,3,7,15,10,3,6,9,
                12,12,6,7,11,13,15,0,3,11,7,1,8,9,13,16,2,13,16,1,2,13,11,13,13,12,9,5,7,1,16,16,13,16,11,6,7,3,13,0,15,7,8,
                11,9,3,9,16,0,0,0,0,5,16,3,8,16,14,2,16,9,0,16,15,16,4,9,12,14,4,3,16,13,2,4,1,10,8,4,4,16,1,8,8,2,3,14,0,16,
                12,1,11,11,1,6,4,15,3,0,15,6,7,5,9,3,13,4,5,8,2,9,6,7,2,6,2,8,4,1,5,9,16,6,13,6,12,9,5,1,0,14,5,2,13,9,8,8,0,
                5,13,0,11,8,15,11,1,1,4,5,8,15,16,16,14,10,6,12,3,5,10,8,9,5,0,16,2,0,1,11,4,3,10,15,11,10,0,1,2,7,12,4,15,6,
                1,6,8,2,10,8,8,10,14,0,0,10,1,10,11,3,14,2,5,8,9,1,4,7,8,9,1,7,14,0,1,13,12,0,2,2,5,8,12,16,5,2,3,2,10,8,7,4,4,
                15,16,5,6,16,12,14,16,1,9,7,0,9,16,0,10,6,10,1,5,12,7,0,12,5,15,10,4,9,5,4,11,13,8,10,1,9,16,8,10,1,4,9,11,2,13,
                7,8,6,11,4,7,12,6,5,3,1,14,15,14,2,0,14,6,14,10,11,6,11,15,13,5,6,9,11,10,2,4,1,0,12,7,15,5,4,0,16,2,7,12,14,13,
                4,0,15,14,10,9,6,10,5,8,7,2,12,4,7,10,14,2,13,7,1,11,13,12,16,11,6,10,11,9,2,14,2,10,5,5,0,13,13,0,12,10,9,14,2,
                4,13,3,11,3,10,12,1,0,8,8,8,14,16,15,9,8,7,11,4,8,5,7,9,1,8,8,12,10,9,3,2,5,1,6,3,12,5,7,9,7,1,3,5,10,3,15,6,9,11,
                16,5,5,1,13,15,9,10,15,11,0,9,3,7,16,2,12,4,12,13,10,6,8,0,2,6,13,10,13,4,1,13,13,14,1,12,11,13,1,2,0,1,4,13,4,1,1,
                4,0,3,12,3,9,8,0,15,8,5,7,13,11,14,1,10,9,11,7,8,14,15,16,13,9,9,5,3,12,11,9,10,3,4,11,1,12,6,1,14,0,6,3,12,4,13,
                10,14,14,1,6,16,9,8,9,4,11,12,15,13,6,12,7,14,3,12,1,3,9,2,15,0,10,8,10,3,4,0,3,12,16,13,9,6,6,15,15,14,10,6,10,6,
                3,2,0,12,9,12,8,4,16,5,13,14,14,12,14,14,4,10,16,4,3,10,1,1,10,3,13,11,13,11,1,5,12,3,10,3,9,12,11,0,9,13,14,10,
                14,16,12,12,16,9,5,15,13,2,0,11,6,8,2,7,13,3,12,1,9,13,15,2,13,14,4,4,11,7,13,6,5,16,7,12,14,0,12,0,10,10,8,13,15,
                15,15,11,0,0,9,15,14,8,8,12,10,0,3,0,7,13,12,4,16,12,6,5,12,11,15,4,2,13,0,16,15,3,16,10,10,7,7,0,10,11,5,14,8,
                16,11,6,16,5,4,13,1,1,3,2,9,12,9,15,4,5,3,2,7,9,9,2,11,4,4,6,5,1,7,5,10,2,11,5,14,6,5,3,2,4,10,16,12,5,1,5,4,4,5,
                16,14,6,6,6,1,16,3,2,16,6,14,11,14,11,4,4,8,10,8,7,11,5,12,11,1,5,6,10,12,0,6,2,8,1,15,5,14,7,14,6,1,7,2,12,12,16,
                12,4,4,8,2,0,11,13,6,4,4,13,7,15,15,8,4,6,9,11,4,16,15,4,3,9,1,6,9,11,10,11,8,5,12,16,12,1,8,12,5,6,11,15,16,7,4,
                0,15,15,2,15,15,13,11,2,4,10,10,7,11,5,5,12,6,9,1,1,14,13,4,11,13,10,11,5,4,11,13,5,3,3,16,0,12,1,0,1,1,0,7,8,16,
                4,15,16,5,14,7,5,12,14,0,15,13,10,13,7,5,6,13,0,5,12,12,10,4,9,4,3,12,10,5,4,16,5,5,14,0,0,16,8,9,7,6,0,4,0,1,0,
                2,1,1,0,14,4,14,11,4,5,9,4,3,0,15,8,8,10,3,13,4,14,9,10,7,2,9,4,0,15,9,3,15,9,11,10,14,2,0,7,5,13,4,9,11,14,14,8,
                2,12,1,5,13,16,4,15,6,12,13,0,11,9,16,15,0,9,6,16,3,12,11,15,10,12,15,7,9,7,15,12,14,0,2,6,14,16,7,16,4,16,6,1,13,
                5,7,3,10,7,16,7,0,4,3,1,8,3,7,12,10,12,12,14,11,5,3,1,8,4,15,0,7,5,0,13,10,9,10,1,1,3,6,5,3,11,8,3,0,13,1,6,4,7,3,
                10,7,3,5,3,4,2,16,2,3,10,5,14,2,3,14,3,1,14,1,13,15,11,1,1,1,11,8,15,7,9,8,15,7,16,15,12,2,3,11,13,6,0,5,0,2,11,
                10,3,7,9,4,1,12,8,11,5,14,10,6,3,11,10,5,4,5,13,13,2,14,2,3,5,6,6,14,9,13,13,0,3,3,12,4,11,10,12,15,2,5,16,11,13,
                10,11,13,13,15,12,7,9,5,13,0,2,15,0,16,11,1,0,4,6,2,12,16,4,6,0,10,2,16,6,15,9,5,15,7,15,3,8,7,0,15,1,12,5,11,3,
                10,7,3,5,1,11,9,10,6,13,9,1,2,7,10,5,3,11,5,15,15,0,13,4,14,7,1,10,1,16,2,0,11,0,6,10,8,9,5,0,4,11,3,11,4,14,12,
                11,16,0,16,9,11,8,12,10,16,7,12,14,8,1,8,1,0,4,16,14,4,13,8,10,13,2,15,7,2,1,5,8,8,7,4,7,10,15,4,10,5,2,9,15,0,5,
                10,2,8,11,8,15,14,10,2,7,8,5,10,9,2,6,13,13,8,4,12,0,10,9,10,11,5,4,2,10,0,11,14,15,12,5,5,16,13,10,14,6,14,9,4,4,
                3,16,1,13,15,13,1,15,6,8,15,3,7,16,0,4,14,15,7,9,4,4,2,9,11,0,12,10,14,11,11,2,8,11,6,2,9,3,9,0,8,16,12,11,7,9,13,
                16,7,16,7,3,1,7,4,3,12,0,6,14,5,16,14,2,13,4,0,3,8,10,10,10,10,2,0,4,10,13,5,13,14,15,9,13,16,12,16,8,16,12,14,10,
                });

        Assert.assertEquals(result, 3);
        Assert.assertEquals(result1, 3);
        Assert.assertEquals(result2, 3);
    }
}
